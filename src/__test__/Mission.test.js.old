import React from 'react';
import { render, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import Mission from '../Links.js/Missions'; // Import your Mission component

// Import your mission slice (assuming it's generated by createSlice)
import missionSlice from '../redux/MissionSlice';

// Create a mock store using redux-mock-store
const mockStore = configureStore([]);

describe('Mission component', () => {
  let store;

  beforeEach(() => {
    // Initialize a new store for each test
    store = mockStore({
      mission: missionSlice.reducer(undefined, {
        mission: [],
        status: 'idle',
        error: null,
      }), // Pass the initial state from the reducer
    });
  });

  it('renders missions correctly', () => {
    // Dispatch actions to set the state as needed
    store.dispatch(
      missionSlice.actions.updateStatus([
        {
          mission_name: 'mission 1',
          description: 'Mission mission',
          mission_id: 1,
        },
        {
          mission_name: 'mission 2',
          description: 'Mission mission mission',
          mission_id: 2,
        },
      ]),
    ); // Replace with your actual data
    store.dispatch(
      missionSlice.actions.fetchMissions([
        {
          mission_name: 'mission 1',
          description: 'Mission mission',
          mission_id: 1,
        },
        {
          mission_name: 'mission 2',
          description: 'Mission mission mission',
          mission_id: 2,
        },
      ]),
    ); // Replace with your actual data

    const { getByText } = render(
      <Provider store={store}>
        <Mission />
      </Provider>,
    );

    // Assertions for the content you expect to be rendered
    expect(getByText('Mission')).toBeInTheDocument();
    expect(getByText('Description')).toBeInTheDocument();
    expect(getByText('Status')).toBeInTheDocument();

    // You can add more specific assertions based on your data
    // For example:
    expect(getByText('Mission 1')).toBeInTheDocument();
    expect(getByText('Active member')).toBeInTheDocument();

    // Ensure the button is present and clickable
    const joinButton = getByText('Join Mission');
    fireEvent.click(joinButton);

    // Expect your updateStatus action to have been called
    expect(store.getActions()).toContainEqual(
      missionSlice.actions.updateStatus(yourMockData),
    ); // Replace with your actual data
  });

  // You can add more test cases as needed
});

